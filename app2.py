# -*- coding: utf-8 -*-
"""
Created on Mon Dec 16 17:47:16 2024

@author: jperezr
"""

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, roc_curve, auc
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.graph_objects as go
import plotly.express as px

# Estilo de fondo
page_bg_img = """
<style>
[data-testid="stAppViewContainer"]{
background:
radial-gradient(black 15%, transparent 16%) 0 0,
radial-gradient(black 15%, transparent 16%) 8px 8px,
radial-gradient(rgba(255,255,255,.1) 15%, transparent 20%) 0 1px,
radial-gradient(rgba(255,255,255,.1) 15%, transparent 20%) 8px 9px;
background-color:#282828;
background-size:16px 16px;
</style>
"""

st.markdown(page_bg_img, unsafe_allow_html=True)



# T√≠tulo y descripci√≥n
st.title("Predicci√≥n de Potencial Comercial de Yacimientos Petroleros")
st.write("""
Esta aplicaci√≥n utiliza Machine Learning para predecir si un yacimiento petrolero es **comercial** o no. 
Ajusta las propiedades del modelo, entrena y eval√∫a el rendimiento. üõ¢Ô∏è
""")

# Barra lateral con configuraci√≥n y ayuda
st.sidebar.header("Configuraci√≥n del modelo")
st.sidebar.write("""
### Ayuda
Esta aplicaci√≥n permite predecir el **potencial comercial** de yacimientos petroleros utilizando modelos de Machine Learning.

#### Modelos utilizados:
- **Regresi√≥n Log√≠stica**: Un modelo lineal que estima la probabilidad de que un yacimiento sea comercial o no.
- **√Årbol de Decisi√≥n**: Un modelo basado en reglas de decisi√≥n que divide los datos en funci√≥n de caracter√≠sticas.
- **Bosques Aleatorios**: Un conjunto de √°rboles de decisi√≥n que mejora la precisi√≥n mediante el voto entre varios √°rboles.

#### ¬øC√≥mo funciona la aplicaci√≥n?
1. El usuario puede ajustar la configuraci√≥n del modelo en la barra lateral.
2. Se entrena el modelo seleccionado con los datos geof√≠sicos simulados.
3. Se presenta la **precisi√≥n** del modelo, junto con m√©tricas como la **matriz de confusi√≥n** y la **curva ROC**.
4. Tambi√©n puedes explorar gr√°ficos interactivos de las caracter√≠sticas y la evoluci√≥n de la precisi√≥n del modelo a lo largo del tiempo.

Desarrollado por:  **Javier Horacio P√©rez Ric√°rdez**.
""")

# Simulaci√≥n de datos geof√≠sicos
np.random.seed(42)
n_samples = 500
data = {
    "Porosidad (%)": np.random.uniform(5, 30, n_samples),
    "Permeabilidad (mD)": np.random.uniform(10, 500, n_samples),
    "Saturaci√≥n de Agua (%)": np.random.uniform(10, 80, n_samples),
    "Profundidad (m)": np.random.uniform(1000, 4000, n_samples),
    "Potencial Comercial": np.random.choice([0, 1], size=n_samples, p=[0.7, 0.3])
}
df = pd.DataFrame(data)

# Visualizaci√≥n inicial del dataset
if st.checkbox("Mostrar dataset simulado"):
    st.write(df)

# Divisi√≥n de datos
X = df[["Porosidad (%)", "Permeabilidad (mD)", "Saturaci√≥n de Agua (%)", "Profundidad (m)"]]
y = df["Potencial Comercial"]
test_size = st.sidebar.slider("Tama√±o del conjunto de prueba (%)", 10, 50, 30, step=5)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size/100, random_state=42)

# Selecci√≥n de modelo
model_option = st.sidebar.selectbox(
    "Selecciona un modelo:",
    ("Regresi√≥n Log√≠stica", "√Årbol de Decisi√≥n", "Bosques Aleatorios")
)

# Configuraci√≥n de hiperpar√°metros
if model_option == "Regresi√≥n Log√≠stica":
    c_value = st.sidebar.slider("C (Regularizaci√≥n)", 0.01, 10.0, 1.0)
    model = LogisticRegression(C=c_value, max_iter=200)
elif model_option == "√Årbol de Decisi√≥n":
    max_depth = st.sidebar.slider("M√°xima profundidad", 1, 20, 5)
    model = DecisionTreeClassifier(max_depth=max_depth, random_state=42)
else:  # Bosques Aleatorios
    n_estimators = st.sidebar.slider("N√∫mero de √°rboles", 10, 200, 100, step=10)
    max_depth = st.sidebar.slider("M√°xima profundidad", 1, 20, 10)
    model = RandomForestClassifier(n_estimators=n_estimators, max_depth=max_depth, random_state=42)

# Entrenamiento
model.fit(X_train, y_train)

# Predicciones
y_pred = model.predict(X_test)

# M√©tricas
accuracy = accuracy_score(y_test, y_pred)
st.subheader("Rendimiento del Modelo")
st.write(f"Precisi√≥n del modelo: **{accuracy:.2f}**")

# Matriz de confusi√≥n con etiquetas descriptivas
conf_matrix = confusion_matrix(y_test, y_pred)

# Crear un DataFrame con etiquetas y valores
conf_matrix_with_labels = pd.DataFrame(
    [[f"TN: {conf_matrix[0, 0]}", f"FP: {conf_matrix[0, 1]}"],
     [f"FN: {conf_matrix[1, 0]}", f"TP: {conf_matrix[1, 1]}"]], 
    index=["Real: No Comercial", "Real: Comercial"],
    columns=["Predicci√≥n: No Comercial", "Predicci√≥n: Comercial"]
)

# Crear el heatmap
fig, ax = plt.subplots(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=conf_matrix_with_labels.values, fmt="", cmap="Blues", cbar=False, annot_kws={"size": 12})
ax.set_xlabel("Predicci√≥n", fontsize=14)
ax.set_ylabel("Real", fontsize=14)
ax.set_title("Matriz de Confusi√≥n con Etiquetas", fontsize=16)
st.pyplot(fig)

# A√±adir explicaci√≥n en texto
st.write("""
### Desglose de la Matriz de Confusi√≥n:
- **TN (Verdaderos Negativos):** Yacimientos correctamente clasificados como **No Comercial**.
- **FP (Falsos Positivos):** Yacimientos clasificados como **Comercial**, pero no lo son.
- **FN (Falsos Negativos):** Yacimientos clasificados como **No Comercial**, pero son comerciales.
- **TP (Verdaderos Positivos):** Yacimientos correctamente clasificados como **Comercial**.
""")

# Gr√°fico de caracter√≠sticas
if st.checkbox("Mostrar an√°lisis exploratorio"):
    feature = st.selectbox("Selecciona una propiedad para analizar:", X.columns)
    chart_type = st.radio("Selecciona el tipo de gr√°fico:", ["Histograma", "Dispersi√≥n (Scatter)"])

    if chart_type == "Histograma":
        fig = px.histogram(
            df,
            x=feature,
            color="Potencial Comercial",
            nbins=30,
            title=f"Distribuci√≥n de {feature} por Potencial Comercial",
            color_discrete_sequence=px.colors.qualitative.Set2,
            barmode="overlay",
        )
        fig.update_layout(bargap=0.1)
        st.plotly_chart(fig)

    elif chart_type == "Dispersi√≥n (Scatter)":
        y_axis = st.selectbox("Selecciona una propiedad para el eje Y:", X.columns)
        fig = px.scatter(
            df,
            x=feature,
            y=y_axis,
            color="Potencial Comercial",
            title=f"Relaci√≥n entre {feature} y {y_axis}",
            color_discrete_sequence=px.colors.qualitative.Set2,
            size="Porosidad (%)",  # Opcional para tama√±o de punto.
            hover_data=["Porosidad (%)", "Permeabilidad (mD)"],
        )
        st.plotly_chart(fig)

# Gr√°fico de ROC interactivo
if hasattr(model, "predict_proba"):
    y_probs = model.predict_proba(X_test)[:, 1]  # Probabilidades para la clase positiva
    fpr, tpr, thresholds = roc_curve(y_test, y_probs)
    roc_auc = auc(fpr, tpr)

    st.subheader("Curva ROC - Interactiva")
    # Gr√°fico interactivo con Plotly
    roc_curve_fig = go.Figure()

    # Curva ROC
    roc_curve_fig.add_trace(go.Scatter(
        x=fpr, y=tpr, mode='lines', name=f"AUC = {roc_auc:.2f}",
        line=dict(color="darkorange", width=2)
    ))

    # L√≠nea diagonal de referencia con color m√°s visible (azul claro)
    roc_curve_fig.add_trace(go.Scatter(
        x=[0, 1], y=[0, 1], mode='lines', name="L√≠nea aleatoria",
        line=dict(color="blue", width=3, dash="dash")  # Color m√°s visible
    ))

    # Configuraci√≥n de dise√±o
    roc_curve_fig.update_layout(
        title="Curva ROC",
        xaxis_title="Tasa de Falsos Positivos (FPR)",
        yaxis_title="Tasa de Verdaderos Positivos (TPR)",
        showlegend=True,
        template="plotly_dark"
    )

    # Mostrar gr√°fico interactivo
    st.plotly_chart(roc_curve_fig)

# Simulaci√≥n de evoluci√≥n de la precisi√≥n en el tiempo (Gr√°fico animado)
# Crear un DataFrame con resultados a lo largo del tiempo
time_steps = 50  # N√∫mero de pasos en el tiempo
results_df = pd.DataFrame({
    'Time': np.linspace(0, 10, time_steps),
    'Accuracy': np.random.uniform(0.6, 1.0, time_steps),  # Simulamos una precisi√≥n
    'Model': np.random.choice(['Modelo 1', 'Modelo 2'], time_steps),  # Simulamos dos modelos
})

# Crear el gr√°fico animado
fig_anim = px.scatter(
    results_df.sort_values('Time'),
    x='Time', y='Accuracy', color='Model',
    animation_frame='Time',  # Animar con el tiempo
    title="Evoluci√≥n de la precisi√≥n en funci√≥n del tiempo",
    labels={'Time': 'Tiempo (s)', 'Accuracy': 'Precisi√≥n'}
)

# Ajustar la animaci√≥n para que los puntos se acumulen y no desaparezcan
fig_anim.update_layout(
    updatemenus=[dict(
        type="buttons", showactive=False, x=0.1, xanchor="right",
        y=0, yanchor="bottom",
        buttons=[dict(label="Play", method="animate", args=[None, dict(frame=dict(duration=500, redraw=True), fromcurrent=True, mode='immediate')])]
    )]
)

fig_anim.layout.updatemenus[0].buttons[0].args[1]['frame']['duration'] = 1000  # Ajustar la duraci√≥n del frame
fig_anim.update_traces(marker=dict(size=8, opacity=0.7))
st.plotly_chart(fig_anim)
